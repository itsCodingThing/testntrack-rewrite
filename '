import { type FastifyPluginAsync } from "fastify";

import { prisma } from "project/database/db.connection.js";
import { encryptPassword } from "project/utils/encrypt.js";
import { parseAsync, zod } from "project/utils/validation.js";
import { sendErrorResponse, sendSuccessResponse } from "project/utils/serverResponse.js";
import logger from "project/utils/logger.js";

export const schoolAdminUserRoutes: FastifyPluginAsync = async (fastify) => {
  /**
   *  @route  GET "/api/v1/school-admin?schoolId"
   *  @desc   Get all admins
   */
  fastify.route({
    method: "GET",
    url: "/school-admin",
    handler: async (req, res) => {
      const query = await parseAsync(
        zod.object({
          schoolId: zod.coerce.number(),
        }),
        req.query
      );
      logger.info(query, "get school admin query params");

      const school = await prisma.school.findFirst({where: {id: query.schoolId}});

      if (!school) {
        return sendErrorResponse({ msg: "Thers is no school registered with this id", response: res });
      }

      return sendSuccessResponse({
        data: await prisma.schoolAdminUser.findMany({
          where: { schoolId: school.id },
          select: { name: true, id: true, contact: true, email: true },
          orderBy: {name: "asc"}
        }),
        response: res,
      });
    },
  });

  /**
   *  @route  GET "/api/v1/admin/:adminId"
   *  @desc   Get admin details
   */
  fastify.route({
    method: "GET",
    url: "/school-admin/:adminId",
    handler: async (req, res) => {
      const { adminId } = await parseAsync(zod.object({ adminId: zod.coerce.number() }), req.params);

      return sendSuccessResponse({
        data: await prisma.adminUser.findFirst({
          where: { id: adminId },
          select: { name: true, id: true, contact: true, email: true },
        }),
        response: res,
      });
    },
  });

  /**
   *  @rotue   POST "/api/v1/admin/create"
   *  @desc    Create new user
   */
  fastify.route({
    method: "POST",
    url: "/school-admin/create",
    handler: async (req, res) => {
      const body = await parseAsync(
        zod.object({
          schoolId: zod.number().min(1, "please enter a valid school id"),
          name: zod.string().min(1, "please enter admin name"),
          email: zod.string().email("please enter a valid email"),
          password: zod.string().min(8, "password must be 8 charactor long"),
          contact: zod.string().length(10, "please enter valid contact number"),
        }),
        req.body
      );

      // check if the admin user exists with this email
      const alreadyExistUser = await prisma.schoolAdminUser.findFirst({ where: { email: body.email, schoolId: body.schoolId } });
      if (alreadyExistUser) {
        return sendErrorResponse({ msg: "Email already register with us", response: res });
      }

      // create new admin user
      const user = await prisma.adminUser.create({
        data: {
          ...body,
          password: encryptPassword(body.password),
        },
        select: {
          id: true,
          name: true,
          email: true,
        },
      });

      return sendSuccessResponse({
        data: user,
        response: res,
      });
    },
  });

  /**
   * @route   DELETE "/api/v1/admin/user/remove/:id"
   * @desc    Remove admin
   */
  fastify.route({
    method: "DELETE",
    url: "/school-admin/:adminId/remove",
    handler: async (req, res) => {
      const { adminId } = await parseAsync(zod.object({ adminId: zod.coerce.number() }), req.params);
      await prisma.adminUser.delete({ where: { id: adminId } });

      return sendSuccessResponse({ data: "admin deleted successfully", response: res });
    },
  });
};
